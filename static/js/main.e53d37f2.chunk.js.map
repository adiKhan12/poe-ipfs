{"version":3,"sources":["registerServiceWorker.js","index.js","web3.js","storehash.js","App.js","ipfs.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","react_default","a","createElement","App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","web3","n","Web3","currentProvider","_web3__WEBPACK_IMPORTED_MODULE_0__","__webpack_exports__","eth","Contract","constant","inputs","name","outputs","type","payable","stateMutability","ipfsHash","buffer","ethAddress","blockNumber","transactionHash","gasUsed","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","_this","convertToBuffer","_callee","_home_adikhan_myproject_ipfs_poe_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","Buffer","from","result","sent","setState","stop","this","onClick","_callee2","_context2","getTransactionReceipt","err","t0","onSubmit","_callee3","accounts","_context3","getAccounts","storehash","options","address","ipfs","add","hash","methods","sendHash","send","react__WEBPACK_IMPORTED_MODULE_11___default","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","onChange","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","bsStyle","react_bootstrap__WEBPACK_IMPORTED_MODULE_10__","bordered","responsive","Component","require","host","port","protocol"],"mappings":"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","file":"static/js/main.e53d37f2.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-a-stylesheet\nimport 'bootstrap/dist/css/bootstrap.css';\n//import 'bootstrap/dist/css/bootstrap-theme.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// //overrides metamask v0.2 for our 1.0 version.  \n//1.0 lets us use async and await instead of promises\n\nimport Web3 from 'web3';\n//overrides metamask v0.2 for our v 1.0\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;","import web3 from './web3';\n\n//access our local copy to contract deployed on rinkeby testnet\n//use your own contract address\nconst address = '0xb84b12e953f5bcf01b05f926728e855f2d4a67a9';\n//use the ABI from your contract\nconst abi = [\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"getHash\",\n    \"outputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"x\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"sendHash\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\nexport default new web3.eth.Contract(abi, address);","import {Table, Grid, Button, Form } from 'react-bootstrap';\nimport React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\n\nclass App extends Component {\n \n    state = {\n      ipfsHash:null,\n      buffer:'',\n      ethAddress:'',\n      blockNumber:'',\n      transactionHash:'',\n      gasUsed:'',\n      txReceipt: ''   \n    };\n   \n    captureFile =(event) => {\n        event.stopPropagation()\n        event.preventDefault()\n        const file = event.target.files[0]\n        let reader = new window.FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onloadend = () => this.convertToBuffer(reader)    \n      };\n\n    convertToBuffer = async(reader) => {\n      //file is converted to a buffer to prepare for uploading to IPFS\n        const buffer = await Buffer.from(reader.result);\n      //set this buffer -using es6 syntax\n        this.setState({buffer});\n    };\n\n    onClick = async () => {\n\n    try{\n        //this.setState({blockNumber:\"waiting..\"});\n        //this.setState({gasUsed:\"waiting...\"});\n\n        // get Transaction Receipt in console on click\n        // See: https://web3js.readthedocs.io/en/1.0/web3-eth.html#gettransactionreceipt\n        await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\n          console.log(err,txReceipt);\n          this.setState({txReceipt});\n        }); //await for getTransactionReceipt\n\n        //await this.setState({blockNumber: this.state.txReceipt.blockNumber});\n        //await this.setState({gasUsed: this.state.txReceipt.gasUsed});    \n      } //try\n    catch(error){\n        console.log(error);\n      } //catch\n  } //onClick\n\n    onSubmit = async (event) => {\n      event.preventDefault();\n\n      //bring in user's metamask account address\n      const accounts = await web3.eth.getAccounts();\n     \n      console.log('Sending from Metamask account: ' + accounts[0]);\n\n      //obtain contract address from storehash.js\n      const ethAddress= await storehash.options.address;\n      this.setState({ethAddress});\n\n      //save document to IPFS,return its hash#, and set hash# to state\n      //https://github.com/ipfs/interface-ipfs-core/blob/master/SPEC/FILES.md#add \n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n        console.log(err,ipfsHash);\n        //setState by setting ipfsHash to ipfsHash[0].hash \n        this.setState({ ipfsHash:ipfsHash[0].hash });\n\n        // call Ethereum contract method \"sendHash\" and .send IPFS hash to etheruem contract \n        //return the transaction hash from the ethereum contract\n        //see, this https://web3js.readthedocs.io/en/1.0/web3-eth-contract.html#methods-mymethod-send\n        \n        storehash.methods.sendHash(this.state.ipfsHash).send({\n          from: accounts[0] \n        }, (error, transactionHash) => {\n          console.log(transactionHash);\n          this.setState({transactionHash});\n        }); //storehash \n      }) //await ipfs.add \n    }; //onSubmit \n  \n    render() {\n      \n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1> Ethereum and InterPlanetary File System(IPFS) with Create React App</h1>\n          </header>\n          \n          <hr />\n\n        <Grid>\n          <h3> Choose file to send to IPFS </h3>\n          <Form onSubmit={this.onSubmit}>\n            <input \n              type = \"file\"\n              onChange = {this.captureFile}\n            />\n             <Button \n             bsStyle=\"primary\" \n             type=\"submit\"> \n             Send it \n             </Button>\n          </Form>\n\n          <hr/>\n            <Button onClick = {this.onClick}> Get Transaction Receipt </Button>\n\n              <Table bordered responsive>\n                <thead>\n                  <tr>\n                    <th>Tx Receipt Category</th>\n                    <th>Values</th>\n                  </tr>\n                </thead>\n               \n                <tbody>\n                  <tr>\n                    <td>IPFS Hash</td>\n                    <td>{this.state.ipfsHash}</td>\n                  </tr>                \n                </tbody>\n            </Table>\n        </Grid>\n     </div>\n      );\n    } //render\n}\n\nexport default App;\n","//using the infura.io node, otherwise ipfs requires you to run a daemon on your own computer/server. See IPFS.io docs\nconst IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\n//run with local daemon\n// const ipfsApi = require('ipfs-api');\n// const ipfs = new ipfsApi('localhost', '5001', {protocol: 'http'});\n\nexport default ipfs; \n"],"sourceRoot":""}